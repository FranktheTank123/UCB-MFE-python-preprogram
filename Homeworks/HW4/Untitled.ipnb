{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "06c09952",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-02T12:04:18.164046Z",
     "iopub.status.busy": "2022-01-02T12:04:18.164046Z",
     "iopub.status.idle": "2022-01-02T12:04:18.745490Z",
     "shell.execute_reply": "2022-01-02T12:04:18.746486Z"
    },
    "papermill": {
     "duration": 0.590369,
     "end_time": "2022-01-02T12:04:18.746486",
     "exception": false,
     "start_time": "2022-01-02T12:04:18.156117",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d4c76be4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-02T12:04:18.763093Z",
     "iopub.status.busy": "2022-01-02T12:04:18.762096Z",
     "iopub.status.idle": "2022-01-02T12:04:18.775521Z",
     "shell.execute_reply": "2022-01-02T12:04:18.776524Z"
    },
    "papermill": {
     "duration": 0.026396,
     "end_time": "2022-01-02T12:04:18.776524",
     "exception": false,
     "start_time": "2022-01-02T12:04:18.750128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def vol_ohlc(df, lookback=10):\n",
    "    # compute volatility from df\n",
    "    o = df.open\n",
    "    h = df.high\n",
    "    l = df.low\n",
    "    c = df.close\n",
    "    \n",
    "    k = 0.34 / (1.34 + (lookback+1)/(lookback-1))\n",
    "    cc = np.log(c/c.shift(1))\n",
    "    ho = np.log(h/o)\n",
    "    lo = np.log(l/o)\n",
    "    co = np.log(c/o)\n",
    "    oc = np.log(o/c.shift(1))\n",
    "    oc_sq = oc**2\n",
    "    cc_sq = cc**2\n",
    "    rs = ho*(ho-co)+lo*(lo-co)\n",
    "    close_vol = cc_sq.rolling(lookback).sum() * (1.0 / (lookback - 1.0))\n",
    "    open_vol = oc_sq.rolling(lookback).sum() * (1.0 / (lookback - 1.0))\n",
    "    window_rs = rs.rolling(lookback).sum() * (1.0 / (lookback - 1.0))\n",
    "    result = (open_vol + k * close_vol + (1-k) * window_rs).apply(np.sqrt) * np.sqrt(252)\n",
    "    result[:lookback-1] = np.nan\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7333fb02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-01-02T12:04:18.792546Z",
     "iopub.status.busy": "2022-01-02T12:04:18.792546Z",
     "iopub.status.idle": "2022-01-02T12:04:18.807922Z",
     "shell.execute_reply": "2022-01-02T12:04:18.807922Z"
    },
    "papermill": {
     "duration": 0.026945,
     "end_time": "2022-01-02T12:04:18.807922",
     "exception": false,
     "start_time": "2022-01-02T12:04:18.780977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def retrieve_data(chosen_token, from_date,to_date):\n",
    "    # connection to the SQL database at `data.db`\n",
    "    conn = sqlite3.connect('data.db')\n",
    "    # create a cursor object from the connection to use for querying:\n",
    "    cur = conn.cursor()\n",
    "    cur.execute(\"SELECT * FROM ohlc WHERE token = (%r) AND ts BETWEEN (%r) AND (%r)\"%(chosen_token, from_date,to_date))\n",
    "    data = cur.fetchall()\n",
    "    df = pd.DataFrame(\n",
    "        data,\n",
    "        columns=['ts', 'open', 'high', 'low', 'close', 'volume', 'volumeUSD', 'token', 'chain']\n",
    "    )\n",
    "    df['hourly_returns(%)'] = (df.close - df.open)/df.open * 100 \n",
    "    df['volatility'] = vol_ohlc(df)\n",
    "    df.set_index('ts', inplace=True, drop = True)\n",
    "    # In case you have a dark jupyter theme\n",
    "    plt.style.use('dark_background')\n",
    "    fig, axs = plt.subplots(2, 2, sharex=True, sharey=False, figsize=(15,15))\n",
    "    fig.suptitle('Study of {} from {} to {}'.format(chosen_token, start, ending), fontsize=20)\n",
    "    df['hourly_returns(%)'].plot(ax=axs[1,0], title = 'Hourly returns', linestyle = 'dotted', rot = 50)\n",
    "    df['volatility'].plot(ax=axs[1,1], title = 'Hourly volatility', rot = 50)\n",
    "    df['close'].plot(ax=axs[0,1], title = 'Hourly close price', rot = 50)\n",
    "    (df.high.cummax() - df.low.cummin()).plot(ax=axs[0,0], title = 'Hourly max drawdown', rot = 50)\n",
    "    plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.290956,
   "end_time": "2022-01-02T12:04:19.154080",
   "environment_variables": {},
   "exception": null,
   "input_path": "template.ipynb",
   "output_path": "Untitled.ipnb",
   "parameters": {},
   "start_time": "2022-01-02T12:04:16.863124",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}